apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    def globalConfiguration = rootProject.extensions.getByName("ext")

    compileSdkVersion globalConfiguration.getAt("androidCompileSdkVersion")
    buildToolsVersion globalConfiguration.getAt("androidBuildToolsVersion")

    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }

    defaultConfig {
        applicationId globalConfiguration.androidApplicationId
        minSdkVersion globalConfiguration.getAt("androidMinSdkVersion")
        targetSdkVersion globalConfiguration.getAt("androidTargetSdkVersion")
        versionCode globalConfiguration.getAt("androidVersionCode")
        versionName globalConfiguration.getAt("androidVersionName")
        vectorDrawables.useSupportLibrary = true
    }

    signingConfigs {
        release
    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
        }
        release {
            applicationIdSuffix '.release'
            signingConfig signingConfigs.release

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled = true
    }

    sourceSets {
        // Main source set is Kotlin!
        main.java.srcDirs += 'src/main/kotlin'

        // Unit tests live in src/unitTest.
        test.java.srcDir 'src/unitTests/kotlin'

        // Integration tests live in src/integrationTest.
        test.java.srcDir 'src/integrationTests/kotlin'

        // Unit tests for debug build type specific code live in src/debugUnitTest.
        testDebug.java.srcDir 'src/debugUnitTests/kotlin'

        // Unit tests for release build type specific code live in src/releaseUnitTest.
        testRelease.java.srcDir 'src/releaseUnitTests/kotlin'

        // Functional tests live in src/functionalTests.
        androidTest.java.srcDir 'src/functionalTests/kotlin'
    }

    lintOptions {
        warningsAsErrors false
        abortOnError true
        lintConfig file("lint.xml")
    }

    // Show all test output in the command line!
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            exceptionFormat 'full'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(":solver")
    compile project(":remote")
    compile project(":domain")
    compile project(":engine")
    def mobileDependencies = rootProject.ext.mobileDependencies

    // Kotlin
    compile mobileDependencies.kotlin

    // Google Support Libraries
    compile mobileDependencies.support
    compile mobileDependencies.supportFragment
    compile mobileDependencies.appcompat
    compile mobileDependencies.design
    compile mobileDependencies.recyclerView

    // RxJava
    compile mobileDependencies.rxjava
    compile mobileDependencies.rxandroid
    compile mobileDependencies.rxbinding
    compile mobileDependencies.rxSchedulerRule
    compile mobileDependencies.rxDelay

    // Dagger 2
    kapt mobileDependencies.daggerCompiler
    compile mobileDependencies.dagger

    // Retrofit
    compile mobileDependencies.retrofit
    compile mobileDependencies.retrofitConverter
    compile mobileDependencies.retrofitRxAdapter

    // logs
    compile mobileDependencies.pine
    compile mobileDependencies.timbertreeutils

    // image downloading
    compile mobileDependencies.picasso
    compile mobileDependencies.rxNetwork

    // Databinding
    kapt mobileDependencies.databinding

    // butterknife
    compile mobileDependencies.butterknife
    kapt mobileDependencies.butterknifeCompiler

    // Unit Testing
    testCompile mobileDependencies.junit
    testCompile mobileDependencies.mockitoOne
}

repositories {
    jcenter()
    google()
    maven { url 'https://jitpack.io' }
}

// Signing Config code. From https://gist.github.com/gabrielemariotti/6856974
def Properties props = new Properties()
def propFile = new File('dependencies/signing.properties')
if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))

    if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        println 'signing.properties found but some entries are missing'
        android.buildTypes.release.signingConfig = null
    }
} else {
    println 'signing.properties not found'
    android.buildTypes.release.signingConfig = null
}

